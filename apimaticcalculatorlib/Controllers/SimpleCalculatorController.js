/**
  * APIMATICCalculatorLib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
  */

;(function (angular) {
'use strict';

angular.module('APIMATICCalculatorLib')
    .factory('SimpleCalculatorController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        SimpleCalculatorController
    ]);

    function SimpleCalculatorController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Calculates the expression using the specified operation.
             *
             * @param {array}  input    Array with all options for search
             * @param {OperationTypeEnum} input['operation'] The operator to apply on the variables
             * @param {double} input['x'] The LHS value
             * @param {double} input['y'] The RHS value
             *
             * @return {promise<Precision>}
             */
            getCalculate: function (input) {
                // Assign default values
                input = input || {};

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/{operation}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'operation': (input.operation !== null) ? input.operation : null
                });

                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'x': input.x,
                    'y': input.y
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var _strResult =_result.body;
                    _result.body = parseFloat(_strResult);
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
